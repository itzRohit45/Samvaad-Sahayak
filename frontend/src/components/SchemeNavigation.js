import React, { useEffect, useRef } from "react";
import "./SchemeNavigation.css";

// Define scheme categories with icons
const schemeCategories = {
  "‡§ï‡•É‡§∑‡§ø (Krishi)": {
    icon: "üåæ",
    schemes: [
      "‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä ‡§ï‡§ø‡§∏‡§æ‡§® ‡§∏‡§Æ‡•ç‡§Æ‡§æ‡§® ‡§®‡§ø‡§ß‡§ø (PM-KISAN)",
      "‡§Æ‡•É‡§¶‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡§æ‡§∞‡•ç‡§°",
      "‡§ï‡§ø‡§∏‡§æ‡§® ‡§ï‡•ç‡§∞‡•á‡§°‡§ø‡§ü ‡§ï‡§æ‡§∞‡•ç‡§° ‡§Ø‡•ã‡§ú‡§®‡§æ",
    ],
  },
  "‡§Ü‡§µ‡§æ‡§∏ (Awas)": {
    icon: "üè†",
    schemes: ["‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä ‡§Ü‡§µ‡§æ‡§∏ ‡§Ø‡•ã‡§ú‡§®‡§æ (PMAY)", "‡§ó‡•ç‡§∞‡§æ‡§Æ‡•Ä‡§£ ‡§Ü‡§µ‡§æ‡§∏ ‡§Ø‡•ã‡§ú‡§®‡§æ"],
  },
  "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø (Swasthya)": {
    icon: "üè•",
    schemes: [
      "‡§Ü‡§Ø‡•Å‡§∑‡•ç‡§Æ‡§æ‡§® ‡§≠‡§æ‡§∞‡§§",
      "‡§ú‡§® ‡§î‡§∑‡§ß‡§ø ‡§Ø‡•ã‡§ú‡§®‡§æ",
      "‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä ‡§ú‡§® ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§Ø‡•ã‡§ú‡§®‡§æ (PMJAY)",
    ],
  },
  "‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ (Education)": {
    icon: "üìö",
    schemes: ["‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä ‡§ï‡•å‡§∂‡§≤ ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§Ø‡•ã‡§ú‡§®‡§æ (PMKVY)", "‡§¨‡•á‡§ü‡•Ä ‡§¨‡§ö‡§æ‡§ì ‡§¨‡•á‡§ü‡•Ä ‡§™‡§¢‡§º‡§æ‡§ì"],
  },
  "‡§µ‡§ø‡§§‡•ç‡§§ (Finance)": {
    icon: "üí∞",
    schemes: [
      "‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä ‡§ú‡§® ‡§ß‡§® ‡§Ø‡•ã‡§ú‡§®‡§æ (PMJDY)",
      "‡§∏‡•Å‡§ï‡§®‡•ç‡§Ø‡§æ ‡§∏‡§Æ‡•É‡§¶‡•ç‡§ß‡§ø ‡§Ø‡•ã‡§ú‡§®‡§æ (SSY)",
    ],
  },
  "‡§¨‡•Ä‡§Æ‡§æ (Insurance)": {
    icon: "üõ°Ô∏è",
    schemes: [
      "‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä ‡§ú‡•Ä‡§µ‡§® ‡§ú‡•ç‡§Ø‡•ã‡§§‡§ø ‡§¨‡•Ä‡§Æ‡§æ ‡§Ø‡•ã‡§ú‡§®‡§æ (PMJJBY)",
      "‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§¨‡•Ä‡§Æ‡§æ ‡§Ø‡•ã‡§ú‡§®‡§æ (PMSBY)",
    ],
  },
  "‡§ä‡§∞‡•ç‡§ú‡§æ (Energy)": {
    icon: "‚ö°",
    schemes: ["‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä ‡§â‡§ú‡•ç‡§ú‡•ç‡§µ‡§≤‡§æ ‡§Ø‡•ã‡§ú‡§®‡§æ", "‡§∏‡•å‡§≠‡§æ‡§ó‡•ç‡§Ø ‡§Ø‡•ã‡§ú‡§®‡§æ"],
  },
  "‡§™‡•á‡§Ç‡§∂‡§® (Pension)": {
    icon: "üëµ",
    schemes: ["‡§Ö‡§ü‡§≤ ‡§™‡•á‡§Ç‡§∂‡§® ‡§Ø‡•ã‡§ú‡§®‡§æ (APY)", "‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä ‡§µ‡§Ø ‡§µ‡§Ç‡§¶‡§®‡§æ ‡§Ø‡•ã‡§ú‡§®‡§æ"],
  },
};

function SchemeNavigation({ onClose }) {
  const navRef = useRef(null);

  // Handle outside click to close navigation
  useEffect(() => {
    const handleOutsideClick = (event) => {
      if (navRef.current && !navRef.current.contains(event.target)) {
        onClose();
      }
    };

    document.addEventListener("mousedown", handleOutsideClick);
    return () => {
      document.removeEventListener("mousedown", handleOutsideClick);
    };
  }, [onClose]);

  // Handle scheme click - FIXED to properly search for schemes
  const handleSchemeClick = (scheme) => {
    // Create a query string from the scheme name
    const query = `${scheme} ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§Ç`;

    try {
      // Dispatch a custom event that App.js can listen for
      const event = new CustomEvent("schemeSelected", {
        detail: query,
      });
      document.dispatchEvent(event);

      console.log("Scheme selected:", query);

      // Close the navigation after selection
      onClose();
    } catch (error) {
      console.error("Error dispatching scheme selection event:", error);
    }
  };

  // Handle background click to close
  const handleBackgroundClick = (e) => {
    // Only close if clicking the background, not its children
    if (e.target.classList.contains("scheme-navigation")) {
      onClose();
    }
  };

  return (
    <div className="scheme-navigation-overlay" onClick={handleBackgroundClick}>
      <div className="scheme-navigation-panel" ref={navRef}>
        <div className="scheme-nav-header">
          <h2>‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Å</h2>
          <button
            className="close-button"
            onClick={onClose}
            aria-label="‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç"
          >
            ‚úï
          </button>
        </div>

        <div className="categories-grid">
          {Object.entries(schemeCategories).map(
            ([category, { icon, schemes }]) => (
              <div key={category} className="category-card">
                <div className="category-header">
                  <span className="category-icon">{icon}</span>
                  <h3 className="category-title">{category}</h3>
                </div>

                <div className="schemes-list">
                  {schemes.map((scheme, idx) => (
                    <button
                      key={idx}
                      className="scheme-button"
                      onClick={() => handleSchemeClick(scheme)}
                    >
                      {scheme}
                    </button>
                  ))}
                </div>
              </div>
            )
          )}
        </div>
      </div>
    </div>
  );
}

export default SchemeNavigation;
