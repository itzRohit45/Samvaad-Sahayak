import React, { useState } from "react";
import "./EligibilityChecker.css";
import { useLanguage } from "../contexts/LanguageContext";

// Simple rule-based eligibility for demo
const SCHEMES = [
  {
    id: "pmay",
    name: {
      hi: "рдкреНрд░рдзрд╛рдирдордВрддреНрд░реА рдЖрд╡рд╛рд╕ рдпреЛрдЬрдирд╛",
      en: "Pradhan Mantri Awas Yojana",
      ta: "рокро┐ро░родро╛ройрпН роороирпНродро┐ро░ро┐ роЕро╡ро╛ро╕рпН ропрпЛроЬройро╛",
      te: "р░кр▒Нр░░р░зр░╛р░ир▒Н р░ор░Вр░др▒Нр░░р░┐ р░Ер░╡р░╛р░╕р▒Н р░пр▒Лр░Ьр░ир░╛",
    },
    minAge: 18,
    maxIncome: 300000,
    eligibleGenders: ["male", "female", "other"],
    description: {
      hi: "рдЧрд░реАрдм рдкрд░рд┐рд╡рд╛рд░реЛрдВ рдХреЛ рдШрд░ рдЙрдкрд▓рдмреНрдз рдХрд░рд╛рдиреЗ рдХреА рдпреЛрдЬрдирд╛",
      en: "Housing scheme for poor families",
      ta: "роПро┤рпИ роХрпБроЯрпБроорпНрокроЩрпНроХро│рпБроХрпНроХрпБ ро╡рпАроЯрпБ ро╡ро┤роЩрпНроХрпБроорпН родро┐роЯрпНроЯроорпН",
      te: "р░кр▒Зр░ж р░Хр▒Бр░Яр▒Бр░Вр░мр░╛р░▓р░Хр▒Б р░Чр▒Гр░╣ р░кр░ер░Хр░В",
    },
  },
  {
    id: "ujjwala",
    name: {
      hi: "рдкреНрд░рдзрд╛рдирдордВрддреНрд░реА рдЙрдЬреНрдЬреНрд╡рд▓рд╛ рдпреЛрдЬрдирд╛",
      en: "Pradhan Mantri Ujjwala Yojana",
      ta: "рокро┐ро░родро╛ройрпН роороирпНродро┐ро░ро┐ роЙроЬрпНроЬрпНро╡ро▓ро╛ ропрпЛроЬройро╛",
      te: "р░кр▒Нр░░р░зр░╛р░ир▒Н р░ор░Вр░др▒Нр░░р░┐ р░Йр░Ьр▒Нр░Ьр▒Нр░╡р░▓р░╛ р░пр▒Лр░Ьр░ир░╛",
    },
    minAge: 18,
    maxIncome: 200000,
    eligibleGenders: ["female"],
    description: {
      hi: "рдорд╣рд┐рд▓рд╛рдУрдВ рдХреЛ рдореБрдлреНрдд рдЧреИрд╕ рдХрдиреЗрдХреНрд╢рди",
      en: "Free gas connection for women",
      ta: "рокрпЖрогрпНроХро│рпБроХрпНроХрпБ роЗро▓ро╡роЪ роХрпЗуВ╣рпН роЗрогрпИрокрпНрокрпБ",
      te: "р░ор░╣р░┐р░│р░▓р░Хр▒Б р░Йр░Ър░┐р░д р░Чр▒Нр░пр░╛р░╕р▒Н р░Хр░ир▒Жр░Хр▒Нр░╖р░ир▒Н",
    },
  },
  {
    id: "ayushman",
    name: {
      hi: "рдЖрдпреБрд╖реНрдорд╛рди рднрд╛рд░рдд рдпреЛрдЬрдирд╛",
      en: "Ayushman Bharat Scheme",
      ta: "роЖропрпБро╖рпНрооро╛ройрпН рокро╛ро░родрпН родро┐роЯрпНроЯроорпН",
      te: "р░Жр░пр▒Бр░╖р▒Нр░ор░╛р░ир▒Н р░нр░╛р░░р░др▒Н р░кр░ер░Хр░В",
    },
    minAge: 0,
    maxIncome: 250000,
    eligibleGenders: ["male", "female", "other"],
    description: {
      hi: "рдореБрдлреНрдд рд╕реНрд╡рд╛рд╕реНрдереНрдп рдмреАрдорд╛ рдпреЛрдЬрдирд╛",
      en: "Free health insurance scheme",
      ta: "роЗро▓ро╡роЪ роЖро░рпЛроХрпНроХро┐роп рокрзАроорпИ родро┐роЯрпНроЯроорпН",
      te: "р░Йр░Ър░┐р░д р░Жр░░р▒Лр░Чр▒Нр░п р░мр▒Ар░ор░╛ р░кр░ер░Хр░В",
    },
  },
];

const GENDERS = [
  {
    value: "male",
    label: { hi: "рдкреБрд░реБрд╖", en: "Male", ta: "роЖрогрпН", te: "р░кр▒Бр░░р▒Бр░╖р▒Бр░бр▒Б" },
  },
  {
    value: "female",
    label: { hi: "рдорд╣рд┐рд▓рд╛", en: "Female", ta: "рокрпЖрогрпН", te: "р░╕р▒Нр░др▒Нр░░р▒А" },
  },
  {
    value: "other",
    label: { hi: "рдЕрдиреНрдп", en: "Other", ta: "рооро▒рпНро▒ро╡рпИ", te: "р░Зр░др░░" },
  },
];

function EligibilityChecker() {
  const { language } = useLanguage();
  const [age, setAge] = useState(25);
  const [income, setIncome] = useState(150000);
  const [gender, setGender] = useState("male");
  const [result, setResult] = useState(null);
  const [showChecker, setShowChecker] = useState(false);

  const checkEligibility = (e) => {
    e.preventDefault();
    const eligibleSchemes = SCHEMES.filter((scheme) => {
      return (
        age >= scheme.minAge &&
        income <= scheme.maxIncome &&
        scheme.eligibleGenders.includes(gender)
      );
    });
    setResult(eligibleSchemes);
  };

  const getTranslation = (key) => {
    const translations = {
      hi: {
        title: "рддреНрд╡рд░рд┐рдд рдкрд╛рддреНрд░рддрд╛ рдЬрд╛рдВрдЪреЗрдВ",
        description:
          "рдЕрдкрдиреА рдЬрд╛рдирдХрд╛рд░реА рджреЗрдВ рдФрд░ рдкрддрд╛ рдХрд░реЗрдВ рдХрд┐ рдЖрдк рдХрд┐рди рдпреЛрдЬрдирд╛рдУрдВ рдХреЗ рд▓рд┐рдП рдкрд╛рддреНрд░ рд╣реИрдВ",
        age: "рдЖрдпреБ (рд╡рд░реНрд╖)",
        income: "рд╡рд╛рд░реНрд╖рд┐рдХ рдЖрдп (тВ╣)",
        gender: "рд▓рд┐рдВрдЧ",
        check: "рдЬрд╛рдВрдЪреЗрдВ",
        eligible: "рдЖрдк рдЗрди рдпреЛрдЬрдирд╛рдУрдВ рдХреЗ рд▓рд┐рдП рдкрд╛рддреНрд░ рд╣реИрдВ:",
        notEligible:
          "рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рджреА рдЧрдИ рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдЖрдк рдХрд┐рд╕реА рднреА рдпреЛрдЬрдирд╛ рдХреЗ рд▓рд┐рдП рдкрд╛рддреНрд░ рдирд╣реАрдВ рд╣реИрдВред",
        tryDifferent: "рдЕрд▓рдЧ рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд╕рд╛рде рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
        showChecker: "рдкрд╛рддреНрд░рддрд╛ рдЬрд╛рдВрдЪреЗрдВ",
        hideChecker: "рдЫреБрдкрд╛рдПрдВ",
      },
      en: {
        title: "Quick Eligibility Check",
        description:
          "Enter your details to find out which schemes you are eligible for",
        age: "Age (years)",
        income: "Annual Income (тВ╣)",
        gender: "Gender",
        check: "Check",
        eligible: "You are eligible for these schemes:",
        notEligible:
          "Sorry, based on the information provided, you are not eligible for any schemes.",
        tryDifferent: "Try again with different information.",
        showChecker: "Check Eligibility",
        hideChecker: "Hide",
      },
      ta: {
        title: "ро╡ро┐ро░рпИро╡рпБ родроХрпБродро┐ роЪро░ро┐рокро╛ро░рпНрокрпНрокрпБ",
        description:
          "роЙроЩрпНроХро│рпН ро╡ро┐ро╡ро░роЩрпНроХро│рпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН, роирпАроЩрпНроХро│рпН роОроирпНрод родро┐роЯрпНроЯроЩрпНроХро│рпБроХрпНроХрпБ родроХрпБродро┐ропрпБроЯрпИропро╡ро░рпН роОройрпНрокродрпИроХрпН роХрогрпНроЯро▒ро┐ропро╡рпБроорпН",
        age: "ро╡ропродрпБ (роЖрогрпНроЯрпБроХро│рпН)",
        income: "ро╡ро░рпБроЯро╛роирпНродро┐ро░ ро╡ро░рпБрооро╛ройроорпН (тВ╣)",
        gender: "рокро╛ро▓ро┐ройроорпН",
        check: "роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН",
        eligible: "роирпАроЩрпНроХро│рпН роЗроирпНрод родро┐роЯрпНроЯроЩрпНроХро│рпБроХрпНроХрпБ родроХрпБродро┐ропрпБроЯрпИропро╡ро░рпН:",
        notEligible:
          "рооройрпНройро┐роХрпНроХро╡рпБроорпН, ро╡ро┤роЩрпНроХрокрпНрокроЯрпНроЯ родроХро╡ро▓ро┐ройрпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН, роирпАроЩрпНроХро│рпН роОроирпНрод родро┐роЯрпНроЯродрпНродро┐ро▒рпНроХрпБроорпН родроХрпБродро┐ропрпБроЯрпИропро╡ро░рпН роЕро▓рпНро▓.",
        tryDifferent: "ро╡рпЗро▒рпБ родроХро╡ро▓рпБроЯройрпН роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.",
        showChecker: "родроХрпБродро┐ роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН",
        hideChecker: "рооро▒рпИ",
      },
      te: {
        title: "р░др▒Нр░╡р░░р░┐р░д р░Ер░░р▒Нр░╣р░д р░др░ир░┐р░Цр▒А",
        description:
          "р░ор▒А р░╡р░┐р░╡р░░р░╛р░▓р░ир▒Б р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐ р░ор░░р░┐р░пр▒Б р░ор▒Ар░░р▒Б р░П р░кр░ер░Хр░╛р░▓р░Хр▒Б р░Ер░░р▒Нр░╣р▒Бр░▓р▒Б р░Ер░ир░┐ р░др▒Жр░▓р▒Бр░╕р▒Бр░Хр▒Лр░Вр░бр░┐",
        age: "р░╡р░пр░╕р▒Нр░╕р▒Б (р░╕р░Вр░╡р░др▒Нр░╕р░░р░╛р░▓р▒Б)",
        income: "р░╡р░╛р░░р▒Нр░╖р░┐р░Х р░Жр░жр░╛р░пр░В (тВ╣)",
        gender: "р░▓р░┐р░Вр░Чр░В",
        check: "р░др░ир░┐р░Цр▒А р░Ър▒Зр░пр░Вр░бр░┐",
        eligible: "р░ор▒Ар░░р▒Б р░И р░кр░ер░Хр░╛р░▓ р░Хр▒Лр░╕р░В р░Ер░░р▒Нр░╣р▒Бр░▓р▒Б:",
        notEligible:
          "р░Хр▒Нр░╖р░ор░┐р░Вр░Ър░Вр░бр░┐, р░Ер░Вр░жр░┐р░Вр░Ър░┐р░и р░╕р░ор░╛р░Ър░╛р░░р░В р░Жр░зр░╛р░░р░Вр░Чр░╛, р░ор▒Ар░░р▒Б р░П р░кр░ер░Хр░╛р░ир░┐р░Хр░┐ р░Ер░░р▒Нр░╣р▒Бр░▓р▒Б р░Хр░╛р░░р▒Б.",
        tryDifferent: "р░╡р▒Зр░░р▒З р░╕р░ор░╛р░Ър░╛р░░р░Вр░др▒Л р░ор░│р▒Нр░▓р▒А р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐.",
        showChecker: "р░Ер░░р▒Нр░╣р░д р░др░ир░┐р░Цр▒А р░Ър▒Зр░пр░Вр░бр░┐",
        hideChecker: "р░жр░╛р░Ър▒Б",
      },
    };
    return translations[language]?.[key] || translations["hi"][key] || key;
  };

  return (
    <div className="eligibility-checker-wrapper">
      <button
        className="eligibility-toggle-btn"
        onClick={() => setShowChecker(!showChecker)}
      >
        ЁЯОп {getTranslation(showChecker ? "hideChecker" : "showChecker")}
      </button>

      {showChecker && (
        <div className="eligibility-checker">
          <h3>{getTranslation("title")}</h3>
          <p className="eligibility-description">
            {getTranslation("description")}
          </p>

          <form onSubmit={checkEligibility}>
            <div className="form-row">
              <label>
                {getTranslation("age")}
                <input
                  type="number"
                  min="0"
                  max="120"
                  value={age}
                  onChange={(e) => setAge(Number(e.target.value))}
                  required
                />
              </label>
              <label>
                {getTranslation("income")}
                <input
                  type="number"
                  min="0"
                  step="1000"
                  value={income}
                  onChange={(e) => setIncome(Number(e.target.value))}
                  required
                />
              </label>
            </div>

            <label>
              {getTranslation("gender")}
              <select
                value={gender}
                onChange={(e) => setGender(e.target.value)}
              >
                {GENDERS.map((g) => (
                  <option key={g.value} value={g.value}>
                    {g.label[language] || g.label.hi}
                  </option>
                ))}
              </select>
            </label>

            <button type="submit" className="check-btn">
              ЁЯФН {getTranslation("check")}
            </button>
          </form>

          {result && (
            <div className="eligibility-result">
              {result.length > 0 ? (
                <>
                  <h4>тЬЕ {getTranslation("eligible")}</h4>
                  <div className="schemes-list">
                    {result.map((scheme) => (
                      <div key={scheme.id} className="scheme-card">
                        <h5>{scheme.name[language] || scheme.name.hi}</h5>
                        <p>
                          {scheme.description[language] ||
                            scheme.description.hi}
                        </p>
                      </div>
                    ))}
                  </div>
                </>
              ) : (
                <div className="no-schemes">
                  <h4>тЭМ {getTranslation("notEligible")}</h4>
                  <p>{getTranslation("tryDifferent")}</p>
                </div>
              )}
            </div>
          )}
        </div>
      )}
    </div>
  );
}

export default EligibilityChecker;
